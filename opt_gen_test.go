// Code generated by opt-gen. DO NOT EDIT.

package opt_test

import (
	"testing"

	"gopkg.in/mab-go/opt.v0"
)

// --- Bool --------------------------------------------------------------------

func TestMakeBool(t *testing.T) {
	_ = opt.MakeBool(false)
	_ = opt.MakeBool(true)
}

func TestBool_GetSet(t *testing.T) {
	val0 := opt.Bool{}
	val0.Set(false)
	if val0.Get() != false {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), false)
	}

	val1 := opt.Bool{}
	val1.Set(true)
	if val1.Get() != true {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), true)
	}
}

func TestBool_IsSet(t *testing.T) {
	val0A := opt.Bool{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(false)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeBool(false)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Bool{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(true)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeBool(true)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}
}

// --- Byte --------------------------------------------------------------------

func TestMakeByte(t *testing.T) {
	_ = opt.MakeByte(byte('A'))
	_ = opt.MakeByte(byte('B'))
	_ = opt.MakeByte(byte('C'))
}

func TestByte_GetSet(t *testing.T) {
	val0 := opt.Byte{}
	val0.Set(byte('A'))
	if val0.Get() != byte('A') {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), byte('A'))
	}

	val1 := opt.Byte{}
	val1.Set(byte('B'))
	if val1.Get() != byte('B') {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), byte('B'))
	}

	val2 := opt.Byte{}
	val2.Set(byte('C'))
	if val2.Get() != byte('C') {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), byte('C'))
	}
}

func TestByte_IsSet(t *testing.T) {
	val0A := opt.Byte{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(byte('A'))
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeByte(byte('A'))
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Byte{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(byte('B'))
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeByte(byte('B'))
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Byte{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(byte('C'))
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeByte(byte('C'))
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Complex64 ---------------------------------------------------------------

func TestMakeComplex64(t *testing.T) {
	_ = opt.MakeComplex64(1 + 2i)
	_ = opt.MakeComplex64(3 + 4i)
	_ = opt.MakeComplex64(5 + 6i)
}

func TestComplex64_GetSet(t *testing.T) {
	val0 := opt.Complex64{}
	val0.Set(1 + 2i)
	if val0.Get() != 1+2i {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1+2i)
	}

	val1 := opt.Complex64{}
	val1.Set(3 + 4i)
	if val1.Get() != 3+4i {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 3+4i)
	}

	val2 := opt.Complex64{}
	val2.Set(5 + 6i)
	if val2.Get() != 5+6i {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 5+6i)
	}
}

func TestComplex64_IsSet(t *testing.T) {
	val0A := opt.Complex64{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1 + 2i)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeComplex64(1 + 2i)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Complex64{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(3 + 4i)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeComplex64(3 + 4i)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Complex64{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(5 + 6i)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeComplex64(5 + 6i)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Complex128 --------------------------------------------------------------

func TestMakeComplex128(t *testing.T) {
	_ = opt.MakeComplex128(1 + 2i)
	_ = opt.MakeComplex128(3 + 4i)
	_ = opt.MakeComplex128(5 + 6i)
}

func TestComplex128_GetSet(t *testing.T) {
	val0 := opt.Complex128{}
	val0.Set(1 + 2i)
	if val0.Get() != 1+2i {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1+2i)
	}

	val1 := opt.Complex128{}
	val1.Set(3 + 4i)
	if val1.Get() != 3+4i {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 3+4i)
	}

	val2 := opt.Complex128{}
	val2.Set(5 + 6i)
	if val2.Get() != 5+6i {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 5+6i)
	}
}

func TestComplex128_IsSet(t *testing.T) {
	val0A := opt.Complex128{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1 + 2i)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeComplex128(1 + 2i)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Complex128{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(3 + 4i)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeComplex128(3 + 4i)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Complex128{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(5 + 6i)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeComplex128(5 + 6i)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Float32 -----------------------------------------------------------------

func TestMakeFloat32(t *testing.T) {
	_ = opt.MakeFloat32(1.2)
	_ = opt.MakeFloat32(3.4)
	_ = opt.MakeFloat32(5.6)
}

func TestFloat32_GetSet(t *testing.T) {
	val0 := opt.Float32{}
	val0.Set(1.2)
	if val0.Get() != 1.2 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1.2)
	}

	val1 := opt.Float32{}
	val1.Set(3.4)
	if val1.Get() != 3.4 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 3.4)
	}

	val2 := opt.Float32{}
	val2.Set(5.6)
	if val2.Get() != 5.6 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 5.6)
	}
}

func TestFloat32_IsSet(t *testing.T) {
	val0A := opt.Float32{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1.2)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeFloat32(1.2)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Float32{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(3.4)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeFloat32(3.4)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Float32{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(5.6)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeFloat32(5.6)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Float64 -----------------------------------------------------------------

func TestMakeFloat64(t *testing.T) {
	_ = opt.MakeFloat64(1.2)
	_ = opt.MakeFloat64(3.4)
	_ = opt.MakeFloat64(5.6)
}

func TestFloat64_GetSet(t *testing.T) {
	val0 := opt.Float64{}
	val0.Set(1.2)
	if val0.Get() != 1.2 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1.2)
	}

	val1 := opt.Float64{}
	val1.Set(3.4)
	if val1.Get() != 3.4 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 3.4)
	}

	val2 := opt.Float64{}
	val2.Set(5.6)
	if val2.Get() != 5.6 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 5.6)
	}
}

func TestFloat64_IsSet(t *testing.T) {
	val0A := opt.Float64{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1.2)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeFloat64(1.2)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Float64{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(3.4)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeFloat64(3.4)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Float64{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(5.6)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeFloat64(5.6)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Int ---------------------------------------------------------------------

func TestMakeInt(t *testing.T) {
	_ = opt.MakeInt(1)
	_ = opt.MakeInt(2)
	_ = opt.MakeInt(3)
}

func TestInt_GetSet(t *testing.T) {
	val0 := opt.Int{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Int{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Int{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestInt_IsSet(t *testing.T) {
	val0A := opt.Int{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeInt(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Int{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeInt(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Int{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeInt(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Int8 --------------------------------------------------------------------

func TestMakeInt8(t *testing.T) {
	_ = opt.MakeInt8(1)
	_ = opt.MakeInt8(2)
	_ = opt.MakeInt8(3)
}

func TestInt8_GetSet(t *testing.T) {
	val0 := opt.Int8{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Int8{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Int8{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestInt8_IsSet(t *testing.T) {
	val0A := opt.Int8{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeInt8(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Int8{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeInt8(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Int8{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeInt8(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Int16 -------------------------------------------------------------------

func TestMakeInt16(t *testing.T) {
	_ = opt.MakeInt16(1)
	_ = opt.MakeInt16(2)
	_ = opt.MakeInt16(3)
}

func TestInt16_GetSet(t *testing.T) {
	val0 := opt.Int16{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Int16{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Int16{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestInt16_IsSet(t *testing.T) {
	val0A := opt.Int16{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeInt16(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Int16{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeInt16(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Int16{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeInt16(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Int32 -------------------------------------------------------------------

func TestMakeInt32(t *testing.T) {
	_ = opt.MakeInt32(1)
	_ = opt.MakeInt32(2)
	_ = opt.MakeInt32(3)
}

func TestInt32_GetSet(t *testing.T) {
	val0 := opt.Int32{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Int32{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Int32{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestInt32_IsSet(t *testing.T) {
	val0A := opt.Int32{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeInt32(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Int32{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeInt32(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Int32{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeInt32(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Int64 -------------------------------------------------------------------

func TestMakeInt64(t *testing.T) {
	_ = opt.MakeInt64(1)
	_ = opt.MakeInt64(2)
	_ = opt.MakeInt64(3)
}

func TestInt64_GetSet(t *testing.T) {
	val0 := opt.Int64{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Int64{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Int64{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestInt64_IsSet(t *testing.T) {
	val0A := opt.Int64{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeInt64(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Int64{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeInt64(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Int64{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeInt64(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Rune --------------------------------------------------------------------

func TestMakeRune(t *testing.T) {
	_ = opt.MakeRune('a')
	_ = opt.MakeRune('b')
	_ = opt.MakeRune('c')
}

func TestRune_GetSet(t *testing.T) {
	val0 := opt.Rune{}
	val0.Set('a')
	if val0.Get() != 'a' {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 'a')
	}

	val1 := opt.Rune{}
	val1.Set('b')
	if val1.Get() != 'b' {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 'b')
	}

	val2 := opt.Rune{}
	val2.Set('c')
	if val2.Get() != 'c' {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 'c')
	}
}

func TestRune_IsSet(t *testing.T) {
	val0A := opt.Rune{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set('a')
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeRune('a')
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Rune{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set('b')
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeRune('b')
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Rune{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set('c')
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeRune('c')
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- String ------------------------------------------------------------------

func TestMakeString(t *testing.T) {
	_ = opt.MakeString("gopher")
	_ = opt.MakeString("badger")
	_ = opt.MakeString("jackalope")
}

func TestString_GetSet(t *testing.T) {
	val0 := opt.String{}
	val0.Set("gopher")
	if val0.Get() != "gopher" {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), "gopher")
	}

	val1 := opt.String{}
	val1.Set("badger")
	if val1.Get() != "badger" {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), "badger")
	}

	val2 := opt.String{}
	val2.Set("jackalope")
	if val2.Get() != "jackalope" {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), "jackalope")
	}
}

func TestString_IsSet(t *testing.T) {
	val0A := opt.String{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set("gopher")
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeString("gopher")
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.String{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set("badger")
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeString("badger")
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.String{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set("jackalope")
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeString("jackalope")
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Uint --------------------------------------------------------------------

func TestMakeUint(t *testing.T) {
	_ = opt.MakeUint(1)
	_ = opt.MakeUint(2)
	_ = opt.MakeUint(3)
}

func TestUint_GetSet(t *testing.T) {
	val0 := opt.Uint{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Uint{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Uint{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestUint_IsSet(t *testing.T) {
	val0A := opt.Uint{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeUint(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Uint{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeUint(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Uint{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeUint(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Uint8 -------------------------------------------------------------------

func TestMakeUint8(t *testing.T) {
	_ = opt.MakeUint8(1)
	_ = opt.MakeUint8(2)
	_ = opt.MakeUint8(3)
}

func TestUint8_GetSet(t *testing.T) {
	val0 := opt.Uint8{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Uint8{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Uint8{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestUint8_IsSet(t *testing.T) {
	val0A := opt.Uint8{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeUint8(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Uint8{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeUint8(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Uint8{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeUint8(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Uint16 ------------------------------------------------------------------

func TestMakeUint16(t *testing.T) {
	_ = opt.MakeUint16(1)
	_ = opt.MakeUint16(2)
	_ = opt.MakeUint16(3)
}

func TestUint16_GetSet(t *testing.T) {
	val0 := opt.Uint16{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Uint16{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Uint16{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestUint16_IsSet(t *testing.T) {
	val0A := opt.Uint16{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeUint16(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Uint16{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeUint16(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Uint16{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeUint16(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Uint32 ------------------------------------------------------------------

func TestMakeUint32(t *testing.T) {
	_ = opt.MakeUint32(1)
	_ = opt.MakeUint32(2)
	_ = opt.MakeUint32(3)
}

func TestUint32_GetSet(t *testing.T) {
	val0 := opt.Uint32{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Uint32{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Uint32{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestUint32_IsSet(t *testing.T) {
	val0A := opt.Uint32{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeUint32(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Uint32{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeUint32(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Uint32{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeUint32(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}

// --- Uint64 ------------------------------------------------------------------

func TestMakeUint64(t *testing.T) {
	_ = opt.MakeUint64(1)
	_ = opt.MakeUint64(2)
	_ = opt.MakeUint64(3)
}

func TestUint64_GetSet(t *testing.T) {
	val0 := opt.Uint64{}
	val0.Set(1)
	if val0.Get() != 1 {
		t.Fatalf("val0.Get; got: %v, want: %v", val0.Get(), 1)
	}

	val1 := opt.Uint64{}
	val1.Set(2)
	if val1.Get() != 2 {
		t.Fatalf("val1.Get; got: %v, want: %v", val1.Get(), 2)
	}

	val2 := opt.Uint64{}
	val2.Set(3)
	if val2.Get() != 3 {
		t.Fatalf("val2.Get; got: %v, want: %v", val2.Get(), 3)
	}
}

func TestUint64_IsSet(t *testing.T) {
	val0A := opt.Uint64{}
	if val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), false)
	}
	val0A.Set(1)
	if !val0A.IsSet() {
		t.Fatalf("val0A.IsSet; got: %v, want: %v", val0A.IsSet(), true)
	}

	val0B := opt.MakeUint64(1)
	if !val0B.IsSet() {
		t.Fatalf("val0B.IsSet; got: %v, want: %v", val0B.IsSet(), true)
	}

	val1A := opt.Uint64{}
	if val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), false)
	}
	val1A.Set(2)
	if !val1A.IsSet() {
		t.Fatalf("val1A.IsSet; got: %v, want: %v", val1A.IsSet(), true)
	}

	val1B := opt.MakeUint64(2)
	if !val1B.IsSet() {
		t.Fatalf("val1B.IsSet; got: %v, want: %v", val1B.IsSet(), true)
	}

	val2A := opt.Uint64{}
	if val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), false)
	}
	val2A.Set(3)
	if !val2A.IsSet() {
		t.Fatalf("val2A.IsSet; got: %v, want: %v", val2A.IsSet(), true)
	}

	val2B := opt.MakeUint64(3)
	if !val2B.IsSet() {
		t.Fatalf("val2B.IsSet; got: %v, want: %v", val2B.IsSet(), true)
	}
}
